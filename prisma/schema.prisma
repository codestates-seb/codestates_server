

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{ 
  id        String      @id @default(uuid())
  name      String
  email     String   @unique
  password  String?
  socialId  String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments MovieComment[]
  bookmarks MovieBookmark[]
  likes MovieLike[]
  scores MovieScore[]
}

model MovieLike{
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([movieId, userId])
}

model MovieBookmark{
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([movieId, userId])
}

model Movie{
  id        String      @id @default(uuid())
  title     String
  postImage String
  plot     String  @db.LongText
  realesedAt  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment MovieComment[]
  bookmark MovieBookmark[]
  movielike MovieLike[]
  movieScore MovieScore[]
}

model MovieScore{
  id        String      @id @default(uuid())
  score     Int
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
}

model MovieComment{ 
  id  String @id @default(uuid())

  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}