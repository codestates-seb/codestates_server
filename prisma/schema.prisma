

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{ 
  id        String      @id @default(uuid())
  name      String?
  email     String?   @unique
  birth     String?
  nickname  String?
  password  String?
  userType  UserType? @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Reviews MovieReview[]
  bookmarks MovieBookmark[]
  likes MovieLike[]
  scores MovieScore[]
  reports ReviewReport[]
}

model MovieLike{
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([movieId, userId])
}

model MovieBookmark{
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([movieId, userId])
}
model Genre {
  id        String      @id @default(uuid())
  name      String
  movieGenres MovieGenre[]
}

model MovieGenre {
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId String
  genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([movieId, genreId])
}

model Category {
  id        String      @id @default(uuid())
  name      String
  movieCategories MovieCategory[]
}

model MovieCategory {
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([movieId, categoryId])
}

model ReviewReport {
  id       String      @id @default(uuid())
  constent String
  reason   String
  type ReportType @default(PENDING)

  reivewId String
  review MovieReview @relation(fields: [reivewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Movie{
  id        String      @id @default(uuid())
  title     String
  postImage String
  plot     String  @db.LongText
  releasedAt  String
  rating String
  runtime String
  company String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews MovieReview[]
  bookmarks MovieBookmark[]
  movieLikes MovieLike[]
  movieScores MovieScore[]
  movieStaffs MovieStaff[]
  movieActors MovieActor[]
  movieGenres MovieGenre[]
  movieCategories MovieCategory[]
}

model MovieStaff{
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId String
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([movieId, staffId])
}

model MovieActor{
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actorId String
  actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([movieId, actorId])
}

model Staff {
  id       String      @id @default(uuid())
  name     String
  role    String
  movieStaffs MovieStaff[]

}

model Actor{
  id       String      @id @default(uuid())
  name     String
  movieActors MovieActor[]
}

model MovieScore{
  id        String      @id @default(uuid())
  score     Int
  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
}

model MovieReview{ 
  id  String @id @default(uuid())

  content String @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movieId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reviewReports ReviewReport[]
}

enum UserType{
  ADMIN
  USER
}

enum ReportType{
  PENDING
  IGNORE
  USER_DELETE
}