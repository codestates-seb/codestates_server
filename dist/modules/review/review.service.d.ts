import { Prisma } from '@prisma/client';
import { PrismaService } from 'database/prisma.service';
import { PaginationDTO, PagingDTO } from 'kyoongdev-nestjs';
import { MovieService } from 'modules/movie/movie.service';
import { UserService } from 'modules/user/user.service';
import { CreateReviewDTO, ReviewDto, UpdateReviewDTO, CreateReviewCommentDTO, ReviewCountDTO } from './dto';
import { ReviewCommentDTO } from './dto/review-comment.dto';
import { UserReviewInfoDTO } from './dto/user-review-info.dto';
export declare class ReviewService {
    private readonly database;
    private readonly userService;
    private readonly movieService;
    constructor(database: PrismaService, userService: UserService, movieService: MovieService);
    getReviewCount(): Promise<ReviewCountDTO>;
    getReviewAdditionInfo(reviewId: string, userId?: string): Promise<{
        likeCount: number;
        hateCount: number;
        isLiked: boolean;
        isHated: boolean;
        enjoyPoints: string[];
        tensions: string[];
    }>;
    findReview(id: string, userId?: string): Promise<ReviewDto>;
    findReviewByMovieAndUser(movieId: string, userId: string): Promise<ReviewDto>;
    findReviews(paging: PagingDTO, args?: Prisma.MovieReviewFindManyArgs, userId?: string): Promise<PaginationDTO<ReviewDto>>;
    findReviewsWithNoPaging(args?: Prisma.MovieReviewFindManyArgs, userId?: string): Promise<ReviewDto[]>;
    findReviewsByMovieId(movieId: string, userId?: string, args?: Prisma.MovieReviewFindManyArgs): Promise<ReviewDto[]>;
    findReviewsByUserId(userId: string): Promise<ReviewDto[]>;
    getUserReviewInfo(userId: string): Promise<UserReviewInfoDTO>;
    getReviewTenstions(reviewId: string): Promise<string[]>;
    getReviewEnjoyPoints(reviewId: string): Promise<string[]>;
    createReview(movieId: string, userId: string, props: CreateReviewDTO): Promise<string>;
    updateReview(id: string, props: UpdateReviewDTO, userId?: string): Promise<void>;
    deleteReview(id: string, userId?: string): Promise<void>;
    findReviewComment(commentId: string): Promise<ReviewCommentDTO>;
    findReviewComments(reviewId: string): Promise<ReviewCommentDTO[]>;
    findReviewCommentsByUserId(reviewId: string, userId: string): Promise<ReviewCommentDTO[]>;
    findUserReviewComments(userId: string): Promise<ReviewCommentDTO[]>;
    createReviewComment(reviewId: string, userId: string, props: CreateReviewCommentDTO): Promise<string>;
    updateReviewComment(commentId: string, userId: string, props: CreateReviewCommentDTO): Promise<void>;
    deleteReviewComment(commentId: string, userId: string): Promise<void>;
    findReviewLike(reviewId: string, userId: string): Promise<boolean>;
    createReviewLike(reviewId: string, userId: string): Promise<void>;
    deleteReviewLike(reviewId: string, userId: string): Promise<void>;
    getReviewLikeCount(reviewId: string): Promise<number>;
    findReviewHate(reviewId: string, userId: string): Promise<boolean>;
    createReviewHate(reviewId: string, userId: string): Promise<void>;
    deleteReviewHate(reviewId: string, userId: string): Promise<void>;
    getReviewHateCount(reviewId: string): Promise<number>;
}
